<?php

/**
 * Unit test for Markatom\Accessor\Generator.
 */

use Markatom\Accessor\Generator;
use Markatom\Accessor\InvalidArgumentException;
use Markatom\Accessor\Naming;
use Tester\Assert;

require __DIR__ . '/bootstrap.php';

$naming = Mockery::mock(Naming::class);

$naming->shouldReceive('getNamespace')->andReturn('_Accessor');
$naming->shouldReceive('deriveClassName')->with('Bar')->andReturn('_Bar');

$generator = new Generator($naming);

Assert::throws(function () use ($generator) {
	$generator->generate('Foo');
}, InvalidArgumentException::class);

class Bar
{
	private $private = 'foo';
	protected $protected = 'bar';
	public $public = 'baz';
}

$actual = $generator->generate('Bar');

$expected = <<<'END'
namespace _Accessor;

/**
 * This class was automatically generated by Markatom/Accessor library.
 */
class _Bar implements \Markatom\Accessor\Accessor
{

	const TARGET = 'Bar';


	private $writer;


	/**
	 * @param object $object
	 * @return array
	 */
	public function read($object)
	{
		$data = (array) $object;

		return [
			'private' => $data["\00Bar\00private"],
			'protected' => $data["\00*\00protected"],
			'public' => $data["public"],
		];
	}


	/**
	 * @param object $object
	 * @param array $data
	 */
	public function write($object, array $data)
	{
		if (!$this->writer) {
			$this->writer = \Closure::bind(function ($property, $value) {
				$this->$property = $value;
			}, $object, 'Bar');
		}

		$this->writer->__invoke('private', $data['private']);
		$this->writer->__invoke('protected', $data['protected']);
		$object->public = $data['public'];
	}

}

END;

Assert::same($expected, $actual);
